# we can override all these properties at runtime using microprofile config convention, e.g.:
# * using system properties `java -Dquarkus.http.port=8080 ...`
# * or env vars `QUARKUS_HTTP_PORT=8080`
# see: https://quarkus.io/guides/config-reference#configuration-sources

# `quarkus.http.root-path` is fixed at compile time and requires a reverse proxy to change the base path
# when deploying. However the frontend needs to know the configuration and will not be aware of any proxy.
# Therefore the `hub.public-root-path` allows modifying the base path at deploy time.
quarkus.http.root-path=/
hub.public-root-path=${quarkus.http.root-path}

# Connection Params for Keycloak Public Client (quarkus.oidc.auth-server-url may use network-private hostname)
# `public-url` is used in the frontend (js), `local-url` in the backend. Maybe the same URL, but does not have to be.

# If using proxyman.local for use with proxyman, start keycloak separately, see docker-compose.yml
# uncomment to use proxyman.local setup
hub.keycloak.public-url=http://localhost:8180
hub.keycloak.local-url=http://localhost:8180
%test.hub.keycloak.local-url=empty
%proxyman.hub.keycloak.public-url=http://proxyman.local:8180
%proxyman.hub.keycloak.local-url=http://proxyman.local:8180
%proxyman.quarkus.oidc.auth-server-url=http://proxyman.local:8180/realms/cryptomator
%cipherduck-staging.hub.keycloak.public-url=https://login1.staging.cryptomator.cloud
%cipherduck-staging.hub.keycloak.local-url=https://login1.staging.cryptomator.cloud

%cipherduck-staging.quarkus.oidc.auth-server-url=https://login1.staging.cryptomator.cloud/realms/cipherduck
hub.keycloak.realm=cryptomator
%cipherduck-staging.hub.keycloak.realm=cipherduck


hub.managed-instance=false

quarkus.resteasy-reactive.path=/api
%test.quarkus.resteasy-reactive.path=/

# uncomment to use proxyman.local setup
# quarkus.http.host=proxyman.local
%cipherduck-staging.quarkus.http.host=staging.cryptomator.cloud
quarkus.http.port=8080
quarkus.http.access-log.enabled=true
%dev.quarkus.log.level=DEBUG

quarkus.oidc.application-type=service
quarkus.oidc.client-id=cryptomatorhub
%cipherduck-staging.quarkus.oidc.client-id=cryptomator
hub.keycloak.oidc.cryptomator-client-id=cryptomator


# Keycloak dev service
%dev.quarkus.keycloak.devservices.realm-path=dev-realm.json
# TODO: realm-path needs to be in class path, i.e. under src/main/resources -> we might not want to include it in production jar though, so make use of maven profiles and specify optional resources https://github.com/quarkusio/quarkus-quickstarts/blob/f3f4939df30bcff062be126faaaeb58cb7c79fb6/security-keycloak-authorization-quickstart/pom.xml#L68-L75
%dev.quarkus.keycloak.devservices.realm-name=cryptomator
%dev.quarkus.keycloak.devservices.port=8180
%dev.quarkus.keycloak.devservices.service-name=quarkus-cryptomator-hub
%dev.quarkus.keycloak.devservices.image-name=ghcr.io/cryptomator/keycloak:22.0.5
# TODO https://github.com/chenkins/cipherduck-hub/issues/41 add to Dockerfile as well?
# https://github.com/quarkusio/quarkus/blob/596d9ae7a76cf529d24594a82b7c540030799dac/extensions/oidc/deployment/src/main/java/io/quarkus/oidc/deployment/devservices/keycloak/DevServicesConfig.java#L30
# https://github.com/quarkusio/quarkus/blob/main/extensions/oidc/deployment/src/main/java/io/quarkus/oidc/deployment/devservices/keycloak/KeycloakDevServicesProcessor.java#L110
# https://github.com/cryptomator/cryptomator.github.io/blob/52ac36a1db04ce1aa6db41f0aeb0a0f2b76b68b5/assets/js/hubsetup.js#L112
# https://github.com/keycloak/keycloak/issues/20582
%dev.quarkus.keycloak.devservices.start-command=start-dev --import-realm --features=token-exchange
%dev.quarkus.oidc.devui.grant.type=code
# OIDC will be mocked during unit tests. Use fake auth url to prevent dev services to start:
%test.quarkus.oidc.auth-server-url=http://localhost:43210/dev/null

%dev.hub.keycloak.syncer-username=syncer
%dev.hub.keycloak.syncer-password=syncer
%dev.hub.keycloak.syncer-client-id=admin-cli
%dev.hub.keycloak.syncer-period=1m
%test.hub.keycloak.syncer-username=syncer
%test.hub.keycloak.syncer-password=syncer
%test.hub.keycloak.syncer-client-id=admin-cli
%test.hub.keycloak.syncer-period=1m

# Expose OpenAPI and SwaggerUI
quarkus.swagger-ui.enable=false
%dev.quarkus.swagger-ui.enable=true
%dev.quarkus.swagger-ui.title=Hub API
%dev.quarkus.swagger-ui.oauth-use-pkce-with-authorization-code-grant=true

# Database
quarkus.datasource.db-kind=postgresql
quarkus.datasource.jdbc.driver=org.postgresql.Driver
quarkus.datasource.jdbc.transaction-requirement=off
quarkus.datasource.jdbc.max-size=16
quarkus.hibernate-orm.dialect=org.hibernate.dialect.PostgreSQL10Dialect
quarkus.hibernate-orm.database.globally-quoted-identifiers=true
quarkus.flyway.migrate-at-start=true
quarkus.flyway.locations=classpath:org/cryptomator/hub/flyway
%dev.quarkus.flyway.ignore-missing-migrations=true
# https://quarkus.io/guides/databases-dev-services
# https://stackoverflow.com/questions/44654216/correct-way-to-install-psql-without-full-postgres-on-macos
#  psql -h localhost -p 54082 -U quarkus -d quarkus

# log Hibernate SQL statements including values, for dev-purpose only
%dev.quarkus.log.min-level=TRACE
%dev.quarkus.hibernate-orm.log.sql=true
%dev.quarkus.hibernate-orm.log.bind-parameters=true

# Allow cross-origin requests in DEV profile
%dev.quarkus.http.cors=true
%dev.quarkus.http.cors.origins=http://localhost:3000,http//localhost:8080,http://proxyman.local:3000,http//proxyman.local:8080

%test.quarkus.application.version=TEST_VERSION_3000

# HTTP Security Headers see e.g. https://owasp.org/www-project-secure-headers/#div-bestpractices
quarkus.http.header."Content-Security-Policy".value=default-src 'self'; connect-src 'self' api.cryptomator.org; object-src 'none'; child-src 'self'; img-src * data:; frame-ancestors 'none'
#%dev.quarkus.http.header."Content-Security-Policy".value=default-src 'self'; connect-src 'self' api.cryptomator.org localhost:8180 proxyman.local:8180; object-src 'none'; child-src 'self'; img-src * data:; frame-ancestors 'none'
# dev-ui needs very permissive CSP:
%dev.quarkus.http.header."Content-Security-Policy".value=default-src 'self' 'unsafe-inline' 'unsafe-eval' blob: data:; connect-src 'self' api.cryptomator.org localhost:8180 proxyman.local:8180;
quarkus.http.header."Referrer-Policy".value=no-referrer
quarkus.http.header."Strict-Transport-Security".value=max-age=31536000; includeSubDomains
quarkus.http.header."X-Content-Type-Options".value=nosniff
quarkus.http.header."X-Frame-Options".value=deny
# dev-ui needs very permissive xfo:
%dev.quarkus.http.header."X-Frame-Options".value=sameorigin
quarkus.http.header."X-Permitted-Cross-Domain-Policies".value=none
quarkus.http.header."Cross-Origin-Embedder-Policy".value=credentialless
quarkus.http.header."Cross-Origin-Opener-Policy".value=same-origin
quarkus.http.header."Cross-Origin-Resource-Policy".value=same-origin
quarkus.http.header."Content-Type".value=text/html

# Container Image Adjustments
quarkus.container-image.registry=ghcr.io
quarkus.container-image.group=cryptomator
quarkus.container-image.name=hub
quarkus.container-image.tag=latest
quarkus.container-image.labels."org.opencontainers.image.title"=Cryptomator Hub
quarkus.container-image.labels."org.opencontainers.image.description"=Centralized Zero-Knowledge Key Management for using Cryptomator in Teams and Organizations
quarkus.container-image.labels."org.opencontainers.image.vendor"=Skymatic GmbH
quarkus.container-image.labels."org.opencontainers.image.url"=https://cryptomator.org/hub
quarkus.container-image.labels."org.opencontainers.image.source"=https://github.com/cryptomator/hub
quarkus.container-image.labels."org.opencontainers.image.licenses"=AGPL-3.0-or-later
